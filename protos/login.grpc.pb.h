// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: login.proto
#ifndef GRPC_login_2eproto__INCLUDED
#define GRPC_login_2eproto__INCLUDED

#include "login.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_login {

class LoginGrpcService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_login.LoginGrpcService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc_login::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>> AsyncregisterUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc_login::SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::SessionResponse>> Asynclogin(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::SessionResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::SessionResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::SessionResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    virtual ::grpc::Status userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc_login::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::User>> AsyncuserInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::User>>(AsyncuserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::User>> PrepareAsyncuserInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::User>>(PrepareAsyncuserInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc_login::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>> Asynclogout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>> PrepareAsynclogout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void login(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void userInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::User* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void userInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void userInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::SessionResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::SessionResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::User>* AsyncuserInfoRaw(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::User>* PrepareAsyncuserInfoRaw(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>* AsynclogoutRaw(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_login::Result>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc_login::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>> AsyncregisterUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status login(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc_login::SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::SessionResponse>> Asynclogin(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::SessionResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::SessionResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::SessionResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc_login::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::User>> AsyncuserInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::User>>(AsyncuserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::User>> PrepareAsyncuserInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::User>>(PrepareAsyncuserInfoRaw(context, request, cq));
    }
    ::grpc::Status logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc_login::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>> Asynclogout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>> PrepareAsynclogout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) override;
      void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void registerUser(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void login(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login(::grpc::ClientContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response, std::function<void(::grpc::Status)>) override;
      void userInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::User* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void userInfo(::grpc::ClientContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void userInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void userInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) override;
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void logout(::grpc::ClientContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc_login::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::SessionResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::SessionResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::grpc_login::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::User>* AsyncuserInfoRaw(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::User>* PrepareAsyncuserInfoRaw(::grpc::ClientContext* context, const ::grpc_login::SessionResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>* AsynclogoutRaw(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_login::Result>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::grpc_login::SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerUser_;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_userInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_logout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response);
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response);
    virtual ::grpc::Status userInfo(::grpc::ServerContext* context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response);
    virtual ::grpc::Status logout(::grpc::ServerContext* context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::grpc_login::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_login::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc_login::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_login::SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_userInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_userInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userInfo(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserInfo(::grpc::ServerContext* context, ::grpc_login::SessionResponse* request, ::grpc::ServerAsyncResponseWriter< ::grpc_login::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc_login::SessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_login::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerUser<WithAsyncMethod_login<WithAsyncMethod_userInfo<WithAsyncMethod_logout<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_registerUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::UserRequest, ::grpc_login::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc_login::UserRequest* request, ::grpc_login::Result* response) { return this->registerUser(context, request, response); }));}
    void SetMessageAllocatorFor_registerUser(
        ::grpc::experimental::MessageAllocator< ::grpc_login::UserRequest, ::grpc_login::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::UserRequest, ::grpc_login::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* registerUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::UserRequest, ::grpc_login::SessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc_login::UserRequest* request, ::grpc_login::SessionResponse* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::experimental::MessageAllocator< ::grpc_login::UserRequest, ::grpc_login::SessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::UserRequest, ::grpc_login::SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_userInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_userInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::SessionResponse, ::grpc_login::User>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc_login::SessionResponse* request, ::grpc_login::User* response) { return this->userInfo(context, request, response); }));}
    void SetMessageAllocatorFor_userInfo(
        ::grpc::experimental::MessageAllocator< ::grpc_login::SessionResponse, ::grpc_login::User>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::SessionResponse, ::grpc_login::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_userInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userInfo(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* userInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* userInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::SessionRequest, ::grpc_login::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc_login::SessionRequest* request, ::grpc_login::Result* response) { return this->logout(context, request, response); }));}
    void SetMessageAllocatorFor_logout(
        ::grpc::experimental::MessageAllocator< ::grpc_login::SessionRequest, ::grpc_login::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grpc_login::SessionRequest, ::grpc_login::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_registerUser<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_userInfo<ExperimentalWithCallbackMethod_logout<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_registerUser<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_userInfo<ExperimentalWithCallbackMethod_logout<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_userInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_userInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userInfo(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_userInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_userInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_userInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userInfo(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logout() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_registerUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* registerUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_userInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_userInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->userInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_userInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userInfo(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* userInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* userInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_login::UserRequest, ::grpc_login::Result>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::grpc_login::UserRequest, ::grpc_login::Result>* streamer) {
                       return this->StreamedregisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_login::UserRequest,::grpc_login::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_login::UserRequest, ::grpc_login::SessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::grpc_login::UserRequest, ::grpc_login::SessionResponse>* streamer) {
                       return this->Streamedlogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::grpc_login::UserRequest* /*request*/, ::grpc_login::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_login::UserRequest,::grpc_login::SessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_userInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_login::SessionResponse, ::grpc_login::User>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::grpc_login::SessionResponse, ::grpc_login::User>* streamer) {
                       return this->StreameduserInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_userInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userInfo(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionResponse* /*request*/, ::grpc_login::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_login::SessionResponse,::grpc_login::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_login::SessionRequest, ::grpc_login::Result>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::grpc_login::SessionRequest, ::grpc_login::Result>* streamer) {
                       return this->Streamedlogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::grpc_login::SessionRequest* /*request*/, ::grpc_login::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_login::SessionRequest,::grpc_login::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_userInfo<WithStreamedUnaryMethod_logout<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_userInfo<WithStreamedUnaryMethod_logout<Service > > > > StreamedService;
};

}  // namespace grpc_login


#endif  // GRPC_login_2eproto__INCLUDED
